CART RECOVERY APP — PROJECT LOG

===============================
✅ COMPLETED TASKS
===============================

1. Project Setup
----------------
- Flask app initialized with virtual environment
- Project structure:
  cart_recovery_project/
    ├── app/
    │   ├── __init__.py
    │   ├── models.py
    │   ├── extensions.py
    │   ├── routes/
    │   │   ├── user.py
    │   │   ├── item.py
    │   │   └── cart.py
    │   └── utils/
    │       └── scheduler.py
    └── myenv/

- Vite React frontend initialized:
  cart-recovery-frontend/
    ├── components/
    │   └── Navbar.jsx
    ├── pages/
    │   ├── Register.jsx
    │   ├── Items.jsx
    │   ├── Cart.jsx
    │   ├── Checkout.jsx
    │   └── AbandonedCarts.jsx
    └── App.jsx

2. Backend Functionality
------------------------
- User Registration:
  /user/register  [POST]

- Items:
  /item/add       [POST]
  /item/all       [GET]

- Cart:
  /cart/add       [POST]
  /cart/view      [GET]
  /cart/remove    [POST]
  /cart/checkout  [POST]
  /cart/report    [GET]

- Background Job:
  - APScheduler marks inactive carts as "abandoned" every 5 mins
  - Issue with app context resolved using `app.app_context()`

3. Frontend Functionality
-------------------------
- Register.jsx: Form to create user
- Items.jsx: Display items + add item form
- Cart.jsx:
  - Display current cart items (with name, price, quantity)
  - Add item to cart

4. Bug Fixes
------------
- Circular import resolved using `extensions.py`
- Route conflicts resolved
- Background job error fixed
- 404 errors for endpoints fixed
- Flask now runs cleanly


===============================
🧩 PENDING TASKS
===============================

A. Backend
----------
- AbandonmentLog:
  - Log abandoned carts in DB
  - (Optional) Send email or notification

- Improve /cart/report:
  - Show user and cart info with abandonment time

B. Frontend
-----------
- Cart.jsx:
  - Add “Remove Item” button (calls /cart/remove)
  - Add “Checkout” button (calls /cart/checkout)

- AbandonedCarts.jsx:
  - Fetch from /cart/report
  - Display cart_id, user_id, last_updated

- UI Polishing:
  - Add CSS styles
  - Show loading, error states

C. Testing
----------
- Use Postman to test all endpoints:
  /user/register, /item/add, /cart/add, etc.

- Manually test frontend flows:
  Register → Add Item → Add to Cart → Remove → Checkout

D. Optional Enhancements
------------------------
- User login/authentication
- Store cart in localStorage
- Email notifications
- Per-user cart expiry config


===============================
🔜 NEXT STEPS
===============================

1. Finalize Cart.jsx:
   - Add Remove and Checkout buttons
   - Test those actions

2. Create AbandonedCarts.jsx:
   - Show abandoned carts from /cart/report

3. Style all pages lightly

4. Final test and polish
